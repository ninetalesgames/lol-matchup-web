import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../AuthContext';
import { loadNotes, saveNotes } from '../services/DataService';
import championsData from '../assets/champions.json';
import Layout from '../Layout';

type Champion = {
  id: string;
  name: string;
  genericTips: string;
  isFavorite: boolean;
};

export default function ChampionSelection() {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [champions, setChampions] = useState<Champion[]>([]);
  const [search, setSearch] = useState<string>('');
  const [favorites, setFavorites] = useState<string[]>([]);

  useEffect(() => {
    const loadData = async () => {
      const loadedChamps: Champion[] = championsData.map((champ: any) => ({
        ...champ,
        isFavorite: false,
      }));

      const notes = await loadNotes(user);
      const favList: string[] = notes.favorites || [];

      const updatedChamps = loadedChamps.map((champ) => ({
        ...champ,
        isFavorite: favList.includes(champ.id),
      }));

      setChampions(updatedChamps);
      setFavorites(favList);
    };

    loadData();
  }, [user]);

  useEffect(() => {
    const style = document.createElement('style');
    style.innerHTML = `
      @keyframes flyIn {
        0% { opacity: 0; transform: translateY(20px); }
        100% { opacity: 1; transform: translateY(0); }
      }
      .fly-in {
        animation: flyIn 0.5s ease forwards;
      }
    `;
    document.head.appendChild(style);
    return () => document.head.removeChild(style);
  }, []);

  const toggleFavorite = async (id: string) => {
    const updatedFavorites = favorites.includes(id)
      ? favorites.filter((fav) => fav !== id)
      : [...favorites, id];

    setFavorites(updatedFavorites);
    await saveNotes(user, { favorites: updatedFavorites });

    const updatedChamps = champions.map((champ) =>
      champ.id === id ? { ...champ, isFavorite: !champ.isFavorite } : champ
    );
    setChampions(updatedChamps);
  };

  const filteredChampions = champions
    .filter((champ) => champ.name.toLowerCase().includes(search.toLowerCase()))
    .sort((a, b) => (b.isFavorite ? 1 : 0) - (a.isFavorite ? 1 : 0));

  return (
    <>
      <div style={styles.skyboxLayer} />

      <div style={styles.contentWrapper}>
        <div style={styles.overlay}>
          <Layout>
            <div style={styles.container}>
              <h1 style={styles.title}>Who Are You Playing Today?</h1>

              <input
                type="text"
                placeholder="Search champion..."
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                style={styles.search}
              />

              <div style={styles.grid}>
                {filteredChampions.map((champ) => (
                  <div
                    key={champ.id}
                    className="fly-in"
                    style={{
                      ...styles.card,
                      border: champ.isFavorite ? '2px solid gold' : '1px solid #444',
                      opacity: 0,
                      willChange: 'opacity, transform',
                    }}
onClick={() => {
  navigate(`/opponent/${champ.name}`);
}}                    onContextMenu={(e) => {
                      e.preventDefault();
                      toggleFavorite(champ.id);
                    }}
                  >
                    <img
                      src={`https://ddragon.leagueoflegends.com/cdn/15.11.1/img/champion/${champ.id}.png`}
                      alt={champ.name}
                      style={styles.image}
                    />
                    <div style={styles.champName}>{champ.name}</div>
                    {champ.isFavorite && <div style={styles.star}>‚≠ê</div>}
                  </div>
                ))}
              </div>

              <button style={styles.button} onClick={() => navigate('/history')}>
                View Matchup History
              </button>
            </div>
          </Layout>
        </div>
      </div>
    </>
  );
}

const styles: { [key: string]: React.CSSProperties } = {
  skyboxLayer: {
    position: 'fixed',
    top: 0,
    left: 0,
    width: '100vw',
    height: '100vh',
    zIndex: -1,
    backgroundImage:
      'url("https://raw.communitydragon.org/latest/game/assets/maps/skyboxes/riots_sru_skybox_cubemap.png")',
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    backgroundRepeat: 'no-repeat',
    backgroundAttachment: 'fixed',
    opacity: 0.8,
    filter: 'brightness(1)',
    pointerEvents: 'none',
  },
  contentWrapper: {
    position: 'relative',
    zIndex: 1,
  },
  overlay: {
    position: 'relative',
    zIndex: 2,
    padding: '20px',
    background: 'rgba(10, 10, 10, 0.2)',
  },
  container: {
    textAlign: 'center',
  },
  title: {
    marginBottom: '20px',
    fontSize: '2rem',
  },
  search: {
    padding: '10px',
    borderRadius: '20px',
    width: '100%',
    maxWidth: '400px',
    margin: '0 auto 20px',
    display: 'block',
    border: '1px solid #ccc',
  },
  grid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(100px, 1fr))',
    gap: '16px',
    justifyItems: 'center',
    marginBottom: '20px',
  },
  card: {
    position: 'relative',
    width: '100px',
    height: '100px',
    borderRadius: '8px',
    overflow: 'hidden',
    cursor: 'pointer',
    backgroundColor: '#2c3140',
  },
  image: {
    width: '100%',
    height: '100%',
    objectFit: 'cover',
  },
  champName: {
    position: 'absolute',
    bottom: '0',
    width: '100%',
    backgroundColor: 'rgba(0,0,0,0.6)',
    fontSize: '11px',
    padding: '2px 0',
  },
  star: {
    position: 'absolute',
    top: '2px',
    right: '2px',
    fontSize: '14px',
    color: 'gold',
  },
  button: {
    marginTop: '20px',
    padding: '12px 24px',
    backgroundColor: '#8e44ad',
    color: '#fff',
    border: 'none',
    borderRadius: '20px',
    cursor: 'pointer',
    fontSize: '14px',
  },
};
